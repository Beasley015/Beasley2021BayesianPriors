
    model{
      
    # Define hyperprior distributions: intercepts
    omega ~ dunif(0,1)
    
    #Intercepts
    mean.a0 ~ dunif(0,1)
    a0.mean <- log(mean.a0)-log(1-mean.a0)
    tau.a0 ~ dgamma(0.1, 0.1)
    
    mean.a1 ~ dunif(0,1)
    a1.mean <- log(mean.a0)-log(1-mean.a0)
    tau.a1 ~ dgamma(0.1, 0.1)
    
    mean.b0 ~ dunif(0,1)
    b0.mean <- log(mean.b0)-log(1-mean.b0)
    tau.b0 ~ dgamma(0.1, 0.1)

     #Add info for species-level priors
            
            inf.mean0 <- -1.4
            inf.mean1 <- c(0, -1,1, 0)
            
            inf.var <- 0.5
            
            weights <- c(0.5, 0.5)
            lim <- c(10, 11, 12)
            
            #a0 only has one species, so it can go outside the loop
            lb0[1] <- weights[1]/(1/tau.a0)
            lb0[2] <- weights[2]/inf.var
            
            pooled.var0 <- 1/sum(lb0)
            pooled.mean0 <- sum(lb0*c(a0.mean, inf.mean0))*pooled.var0
            
            for(i in 1:(spec+aug)){
              #Create priors from hyperpriors
              w[i] ~ dbern(omega)
              
              g[i] ~ dinterval(i, lim)
              
              lb1[i,1] <- weights[1]/(1/tau.a1)
              lb1[i,2] <- weights[2]/inf.var
              
              pooled.var1[i] <- 1/sum(lb1[i,])
              pooled.mean1[i] <- sum(lb1[i,]*c(a1.mean,inf.mean1[g[i]+1]))*pooled.var1[i]
              
              a0[i] ~ dnorm(ifelse(i==11, pooled.mean0, a0.mean),
                            ifelse(i==11, (1/pooled.var0), tau.a0))
                             
              a1[i] ~ dnorm(ifelse(i==11 || i==12, pooled.mean1[i], 
                            a1.mean), 
                            ifelse(i==11 || i==12, (1/pooled.var1[i]),
                            tau.a1))

              b0[i] ~ dnorm(b0.mean, tau.b0) 

      #Estimate occupancy of species i at point j
      for (j in 1:J){
        logit(psi[j,i]) <- a0[i] + a1[i]*cov1[j]
        Z[j,i] ~ dbern(psi[j,i]*w[i])
    
        #Estimate detection of i at point j during sampling period k
        for(k in 1:K[j]){
          logit(p[j,k,i]) <-  b0[i]
          obs[j,k,i] ~ dbern(p[j,k,i]*Z[j,i])
    }
    }
    }
    
    #Estimate total richness (N) by adding observed (n) and unobserved (n0) species
    n0<-sum(w[(spec+1):(spec+aug)])
    N<-spec+n0
    
    }
    
